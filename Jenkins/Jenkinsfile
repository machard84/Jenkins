def packages = []
pipeline{
    environment {
        REGISTRY = 'registry.chardma.org.uk:8443'
        GIT_URL  = 'https://github.com/greenbone/'
    }
    agent {
        docker {
            label 'tristram'
            image "registry.chardma.org.uk:8443/debian:latest"
            args  '-u root'
        }
    }
    stages{
        stage('install packages in docker container'){
            steps{
                sh 'echo "debconf debconf/frontend select Noninteractive" | debconf-set-selections'
                sh 'apt install -y curl'
                sh 'curl -sL https://deb.nodesource.com/setup_10.x | bash -'
                sh 'curl -sSL https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -'
                sh 'echo "deb https://dl.yarnpkg.com/debian/ stable main" > /etc/apt/sources.list.d/yarn.list'
                sh 'apt update'
                sh 'apt install -y yarn software-properties-common cmake pkg-config libglib2.0-dev libgpgme-dev libgnutls28-dev uuid-dev \
                    libssh-gcrypt-dev libldap2-dev doxygen graphviz libradcli-dev libhiredis-dev libpcap-dev bison libksba-dev libsnmp-dev \
                    gcc-mingw-w64 heimdal-dev libpopt-dev xmltoman redis-server xsltproc libical-dev postgresql postgresql-contrib \
                    postgresql-server-dev-all gnutls-bin nmap rpm nsis curl wget fakeroot gnupg sshpass socat snmp smbclient \
                    libmicrohttpd-dev libxml2-dev python-polib gettext rsync xml-twig-tools python3-paramiko python3-lxml \
                    python3-defusedxml python3-pip python3-psutil virtualenv vim git xsltproc xmltoman texlive-latex-extra \
                    texlive-fonts-recommended'
            }
        }
        stage('Build requirements'){
            matrix{
                axes{
                    axis{
                        name    REQUIREMENT
                        values  "gvm-libs"
                    }
                }
                stages{
                    stage('fetch package requirements'){
                        steps{
                            dir("${REQUIREMENT}"){
                                git url: "${GIT_URL}/${REQUIREMENT}.git",
                                    branch: 'master'
                            }
                        }
                    }
                    stage('create build directory'){
                        steps{
                            dir("${WORKSPACE}/${REQUIREMENT}"){
                                sh 'mkdir build'
                            }
                        }
                    }
                    stage('run make steps'){
                        dir("${WORKSPACE}/${REQUIREMENT}/build"){
                            sh 'cmake ..'
                            sh 'make'
                            sh 'make install'
                        }
                    }
                }
            }
        }
        stage('Build packages'){
            matrix{
                axes{
                    axis{
                        name    PACKAGE
                        values  "openvas",
                                "gvmd",
                                "openvas-smb",
                                "gsa",
                                "ospd-openvas",
                                "ospd",
                                "pheme"
                    }
                }
                stages{
                    stage("Pull from git repositories") {
                        steps {
                            dir("${PACKAGE}") {
                                git url: "${GIT_URL}/${PACKAGE}.git",
                                        branch: 'master'
                                /*      credentialsId: 'my_cred_id', */
                            }
                        }
                    }
                    stage("create build directory") {
                        steps {
                            dir("${WORKSPACE}/${PACKAGE}"){
                                sh 'mkdir build'
                            }
                        }
                    }
                    stage("run make steps"){
                        steps {
                            dir("${WORKSPACE}/${PACKAGE}/build"){
                                sh 'cmake ..'
                                sh 'make'
                                sh 'make install'
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            echo 'Clean up'
            cleanWs()
            deleteDir()
        }
        success {
            echo 'Success'
        }
        failure {
            echo 'Fail'
        }
    }
}